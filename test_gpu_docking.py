#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU –¥–æ–∫–∏–Ω–≥–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω–æ–≥–æ –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–≥–æ –¥–æ–∫–∏–Ω–≥–∞
"""

import subprocess
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

from config import DOCKING_PARAMETERS
from step_04_hit_selection.accelerated_docking import AcceleratedDocking
from step_04_hit_selection.run_hit_selection import optimize_docking_performance
from utils.logger import LOGGER as logger


def test_gpu_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU"""
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU ===")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ NVIDIA GPU
    try:
        result = subprocess.run(["nvidia-smi"], check=False, capture_output=True, text=True)
        if result.returncode == 0:
            logger.info("‚úì NVIDIA GPU –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(result.stdout)
        else:
            logger.warning("‚úó NVIDIA GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except FileNotFoundError:
        logger.warning("‚úó nvidia-smi –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ AutoDock-GPU
    autodock_gpu_path = DOCKING_PARAMETERS.get("autodock_gpu_path")
    if autodock_gpu_path and Path(autodock_gpu_path).exists():
        logger.info(f"‚úì AutoDock-GPU –Ω–∞–π–¥–µ–Ω: {autodock_gpu_path}")

        # –¢–µ—Å—Ç AutoDock-GPU
        try:
            result = subprocess.run([autodock_gpu_path, "--help"], check=False, capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                logger.info("‚úì AutoDock-GPU —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                logger.warning("‚úó AutoDock-GPU –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            logger.warning(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AutoDock-GPU: {e}")
    else:
        logger.warning("‚úó AutoDock-GPU –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    logger.info(f"GPU engine: {DOCKING_PARAMETERS.get('gpu_engine', '–Ω–µ –∑–∞–¥–∞–Ω')}")
    logger.info(f"Use GPU: {DOCKING_PARAMETERS.get('use_gpu', False)}")


def test_docking_engine():
    """–¢–µ—Å—Ç –¥–æ–∫–∏–Ω–≥ –¥–≤–∏–∂–∫–∞"""
    logger.info("\n=== –¢–µ—Å—Ç –¥–æ–∫–∏–Ω–≥ –¥–≤–∏–∂–∫–∞ ===")

    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        optimized_config = optimize_docking_performance()
        logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        docking_engine = AcceleratedDocking(optimized_config)
        logger.info("‚úì –î–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if docking_engine.use_gpu:
            logger.info("‚úì GPU —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("! CPU —Ä–µ–∂–∏–º (GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        return docking_engine

    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞: {e}")
        return None


def test_simple_docking():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ–∫–∏–Ω–≥–∞"""
    logger.info("\n=== –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ–∫–∏–Ω–≥–∞ ===")

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    docking_engine = test_docking_engine()
    if not docking_engine:
        return None

    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–ª–µ–∫—É–ª—ã
    test_molecules = [{"id": "ethanol", "smiles": "CCO"}, {"id": "methanol", "smiles": "CO"}, {"id": "water", "smiles": "O"}]

    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_molecules)} –º–æ–ª–µ–∫—É–ª")

    try:
        start_time = time.time()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–∫–∏–Ω–≥
        results = docking_engine.dock_molecules_batch(test_molecules)

        end_time = time.time()
        elapsed = end_time - start_time

        logger.info(f"‚úì –î–æ–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for mol_id, score in results.items():
            logger.info(f"  {mol_id}: {score:.3f}")

        return results

    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –¥–æ–∫–∏–Ω–≥–∞: {e}")
        return None


def test_gpu_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GPU"""
    logger.info("\n=== –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GPU ===")

    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    gpu_config = DOCKING_PARAMETERS.copy()
    gpu_config["use_gpu"] = True
    gpu_config["gpu_engine"] = "autodock_gpu"

    cpu_config = DOCKING_PARAMETERS.copy()
    cpu_config["use_gpu"] = False

    # –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–ª–µ–∫—É–ª—ã
    test_molecules = [{"id": f"test_mol_{i}", "smiles": "CCO"} for i in range(1000)]

    gpu_time = None
    cpu_time = None

    try:
        # –¢–µ—Å—Ç GPU
        if gpu_config["use_gpu"]:
            logger.info("–¢–µ—Å—Ç GPU —Ä–µ–∂–∏–º–∞...")
            gpu_engine = AcceleratedDocking(gpu_config)

            start_time = time.time()
            gpu_results = gpu_engine.dock_molecules_batch(test_molecules)
            gpu_time = time.time() - start_time

            logger.info(f"GPU: {len(gpu_results)} –º–æ–ª–µ–∫—É–ª –∑–∞ {gpu_time:.2f} —Å–µ–∫")

        # –¢–µ—Å—Ç CPU
        logger.info("–¢–µ—Å—Ç CPU —Ä–µ–∂–∏–º–∞...")
        cpu_engine = AcceleratedDocking(cpu_config)

        start_time = time.time()
        cpu_results = cpu_engine.dock_molecules_batch(test_molecules)
        cpu_time = time.time() - start_time

        logger.info(f"CPU: {len(cpu_results)} –º–æ–ª–µ–∫—É–ª –∑–∞ {cpu_time:.2f} —Å–µ–∫")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if gpu_time is not None and cpu_time is not None and gpu_time > 0:
            speedup = cpu_time / gpu_time
            logger.info(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ GPU: {speedup:.2f}x")

    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GPU –¥–æ–∫–∏–Ω–≥–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU
    test_gpu_availability()

    # –¢–µ—Å—Ç –¥–≤–∏–∂–∫–∞
    test_docking_engine()

    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    test_simple_docking()

    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_gpu_performance()

    logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
