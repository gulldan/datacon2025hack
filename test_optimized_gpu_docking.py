#!/usr/bin/env python3
"""Optimized GPU Docking Test Script
Tests the improved GPU utilization with monitoring and performance analysis
"""

import sys
import time
from pathlib import Path

import polars as pl

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from config import DOCKING_PARAMETERS
from gpu_monitoring import GPUMonitor
from step_04_hit_selection.accelerated_docking import AcceleratedDocking
from utils.logger import setup_logger

logger = setup_logger()

class OptimizedGPUDockingTest:
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ GPU –¥–æ–∫–∏–Ω–≥–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.monitor = GPUMonitor(log_file="optimized_gpu_test.log", interval=0.5)
        self.docking = AcceleratedDocking(DOCKING_PARAMETERS)
        self.results = []

    def prepare_test_molecules(self, count: int = 500) -> list[dict]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–ª–µ–∫—É–ª—ã –¥–ª—è –¥–æ–∫–∏–Ω–≥–∞"""
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–ª–µ–∫—É–ª...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–ª–µ–∫—É–ª—ã
        try:
            molecules_df = pl.read_parquet("step_03_molecule_generation/results/filtered_molecules.parquet")

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N –º–æ–ª–µ–∫—É–ª
            test_molecules = molecules_df.head(count).to_dicts()

            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_molecules)} –º–æ–ª–µ–∫—É–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return test_molecules

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–ª–µ–∫—É–ª: {e}")

            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –º–æ–ª–µ–∫—É–ª—ã
            test_molecules = []
            for i in range(count):
                test_molecules.append({
                    "smiles": f"C1=CC=C(C=C1)C(=O)N{i}",  # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                    "score": 0.5,
                    "molecule_id": f"test_mol_{i}"
                })

            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(test_molecules)} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–ª–µ–∫—É–ª")
            return test_molecules

    def run_performance_test(self, batch_sizes: list[int] = [100, 500, 1000, 2000]):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±–∞—Ç—á–µ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GPU –¥–æ–∫–∏–Ω–≥–∞")

        results = []

        for batch_size in batch_sizes:
            logger.info(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞: {batch_size}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–æ–ª–µ–∫—É–ª—ã
            test_molecules = self.prepare_test_molecules(batch_size)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.docking.config["batch_size"] = batch_size
            self.docking.batch_size = batch_size

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.monitor.start_monitoring()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–∫–∏–Ω–≥
            start_time = time.time()

            try:
                scores = self.docking.dock_molecules_batch(test_molecules)
                end_time = time.time()

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                self.monitor.stop_monitoring()

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                performance_stats = self.monitor.get_performance_summary()

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                total_time = end_time - start_time
                successful_dockings = len([s for s in scores.values() if s is not None and s < 0])
                throughput = len(scores) / total_time if total_time > 0 else 0

                batch_results = {
                    "batch_size": batch_size,
                    "total_molecules": len(test_molecules),
                    "successful_dockings": successful_dockings,
                    "total_time": total_time,
                    "throughput": throughput,
                    "gpu_utilization_avg": performance_stats.get("gpu_utilization", {}).get("avg", 0),
                    "gpu_utilization_max": performance_stats.get("gpu_utilization", {}).get("max", 0),
                    "cpu_utilization_avg": performance_stats.get("cpu_utilization", {}).get("avg", 0),
                    "best_score": min(scores.values()) if scores else None,
                    "scores_count": len(scores)
                }

                results.append(batch_results)

                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                logger.info(f"‚úÖ –ë–∞—Ç—á {batch_size} –∑–∞–≤–µ—Ä—à–µ–Ω:")
                logger.info(f"   –í—Ä–µ–º—è: {total_time:.2f}s")
                logger.info(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {throughput:.2f} –º–æ–ª–µ–∫—É–ª/—Å–µ–∫")
                logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ–∫–∏–Ω–≥–æ–≤: {successful_dockings}/{len(test_molecules)}")
                logger.info(f"   GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {batch_results['gpu_utilization_avg']:.1f}% (avg), {batch_results['gpu_utilization_max']:.1f}% (max)")
                logger.info(f"   CPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {batch_results['cpu_utilization_avg']:.1f}% (avg)")

                if batch_results["best_score"]:
                    logger.info(f"   –õ—É—á—à–∏–π —Å–∫–æ—Ä: {batch_results['best_score']:.2f}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞—Ç—á–∞ {batch_size}: {e}")
                self.monitor.stop_monitoring()

                results.append({
                    "batch_size": batch_size,
                    "error": str(e),
                    "total_time": 0,
                    "throughput": 0,
                    "gpu_utilization_avg": 0
                })

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            time.sleep(5)

        return results

    def run_stress_test(self, duration_minutes: int = 10):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç GPU –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        logger.info(f"üî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ GPU –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –º–æ–ª–µ–∫—É–ª
        test_molecules = self.prepare_test_molecules(5000)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        self.docking.config["batch_size"] = 2000
        self.docking.config["max_concurrent_jobs"] = 32
        self.docking.batch_size = 2000

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor.start_monitoring()

        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)

        total_processed = 0
        total_successful = 0

        try:
            while time.time() < end_time:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–∫–∏–Ω–≥
                scores = self.docking.dock_molecules_batch(test_molecules)

                total_processed += len(test_molecules)
                total_successful += len([s for s in scores.values() if s is not None and s < 0])

                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}, —É—Å–ø–µ—à–Ω–æ: {total_successful}")

                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                time.sleep(1)

        except KeyboardInterrupt:
            logger.info("üõë –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–µ: {e}")
        finally:
            self.monitor.stop_monitoring()

            # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            performance_stats = self.monitor.get_performance_summary()
            actual_duration = time.time() - start_time

            logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:")
            logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {actual_duration/60:.1f} –º–∏–Ω—É—Ç")
            logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–ª–µ–∫—É–ª: {total_processed}")
            logger.info(f"   –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ–∫–∏–Ω–≥–æ–≤: {total_successful}")
            logger.info(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_processed/actual_duration:.2f} –º–æ–ª–µ–∫—É–ª/—Å–µ–∫")

            if "error" not in performance_stats:
                logger.info(f"   GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {performance_stats['gpu_utilization']['avg']:.1f}% (avg), {performance_stats['gpu_utilization']['max']:.1f}% (max)")
                logger.info(f"   CPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {performance_stats['cpu_utilization']['avg']:.1f}% (avg)")

    def analyze_optimization_effectiveness(self, results: list[dict]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("\nüìà –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")

        if not results:
            logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        best_result = max(results, key=lambda x: x.get("gpu_utilization_avg", 0))

        logger.info("üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        logger.info(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {best_result['batch_size']}")
        logger.info(f"   GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {best_result['gpu_utilization_avg']:.1f}%")
        logger.info(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {best_result['throughput']:.2f} –º–æ–ª–µ–∫—É–ª/—Å–µ–∫")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        logger.info("\nüìä –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for result in results:
            if "error" not in result:
                logger.info(f"   –ë–∞—Ç—á {result['batch_size']:4d}: "
                          f"GPU {result['gpu_utilization_avg']:5.1f}%, "
                          f"throughput {result['throughput']:6.2f} mol/s")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

        if best_result["gpu_utilization_avg"] < 50:
            logger.info("   ‚ö†Ô∏è  GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∏–∑–∫–∞—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞")
        elif best_result["gpu_utilization_avg"] > 90:
            logger.info("   üî• –û—Ç–ª–∏—á–Ω–∞—è GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        else:
            logger.info("   ‚úÖ –•–æ—Ä–æ—à–∞—è GPU —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è - —Å–∏—Å—Ç–µ–º–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞")

        if best_result["throughput"] > 10:
            logger.info("   üöÄ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        else:
            logger.info("   ‚ö†Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ GPU –¥–æ–∫–∏–Ω–≥–∞")
    print("=" * 50)

    tester = OptimizedGPUDockingTest()

    try:
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –±–∞—Ç—á–µ–π
        results = tester.run_performance_test([100, 500, 1000, 2000])

        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tester.analyze_optimization_effectiveness(results)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
        user_input = input("\nüî• –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç? (y/N): ")
        if user_input.lower() == "y":
            tester.run_stress_test(duration_minutes=5)

    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
